name: Comprehensive Testing

on:
  push:
    branches: [ "main", "test-data" ]
  pull_request:
    branches: [ "main" ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test/requirements_test.txt
    
    - name: Install package in development mode
      run: |
        pip install -e .
    
    - name: Generate test data
      run: |
        python test/data/generate_small_lattice.py
    
    - name: Run unit tests
      run: |
        python test/run_tests.py --category unit --log-level INFO
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: test/logs/
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test/requirements_test.txt
    
    - name: Install package in development mode
      run: |
        pip install -e .
    
    - name: Generate test data
      run: |
        python test/data/generate_small_lattice.py
    
    - name: Run integration tests
      run: |
        python test/run_tests.py --category integration --log-level INFO
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test/logs/
        retention-days: 30

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test/requirements_test.txt
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium
    
    - name: Generate test data
      run: |
        python test/data/generate_small_lattice.py
    
    - name: Start MagpiEM application
      run: |
        python test/start_app_for_testing.py --log-level WARNING &
        echo $! > magpiem.pid
        sleep 15
    
    - name: Run end-to-end tests
      run: |
        xvfb-run -a python test/run_tests.py --category e2e --log-level INFO
    
    - name: Stop MagpiEM application
      if: always()
      run: |
        if [ -f magpiem.pid ]; then
          kill $(cat magpiem.pid) || true
          rm magpiem.pid
        fi
        # Also kill any remaining python processes on port 8050
        pkill -f "python.*dash_ui" || true
    
    - name: Upload e2e test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: test/logs/
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/
    
    - name: Create test summary
      run: |
        echo "# Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Categories" >> test-summary.md
        echo "" >> test-summary.md
        
        if [ -d "test-results/unit-test-results" ]; then
          echo "Unit Tests: PASSED" >> test-summary.md
        else
          echo "Unit Tests: FAILED" >> test-summary.md
        fi
        
        if [ -d "test-results/integration-test-results" ]; then
          echo "Integration Tests: PASSED" >> test-summary.md
        else
          echo "Integration Tests: FAILED" >> test-summary.md
        fi
        
        if [ -d "test-results/e2e-test-results" ]; then
          echo "End-to-End Tests: PASSED" >> test-summary.md
        else
          echo "End-to-End Tests: FAILED" >> test-summary.md
        fi
    
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
