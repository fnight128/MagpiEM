name: Cross-Platform Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  cross-platform:
    name: Test on ${{ matrix.os }} Python 3.10
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb build-essential
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows runners already have Visual Studio Build Tools installed
        echo "Using pre-installed build tools on Windows runner"
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install Xcode command line tools
        xcode-select --install || true
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test/requirements_test.txt
    
    - name: Install package in development mode
      run: |
        pip install -e .
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium
    
    - name: Generate test data
      run: |
        python test/data/generate_small_lattice.py
    
    - name: Run unit tests
      run: |
        python test/run_tests.py --category unit --log-level INFO
    
    - name: Run integration tests
      run: |
        python test/run_tests.py --category integration --log-level INFO
    
    - name: Start MagpiEM application
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          python test/start_app_for_testing.py --log-level WARNING &
          echo $! > magpiem.pid
          sleep 15
        else
          python test/start_app_for_testing.py --log-level WARNING
          Start-Sleep 15
        fi
    
    - name: Run end-to-end tests (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        xvfb-run -a python test/run_tests.py --category e2e --log-level INFO
    
    - name: Run end-to-end tests (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      run: |
        python test/run_tests.py --category e2e --log-level INFO
    
    - name: Stop MagpiEM application
      if: always()
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          if [ -f magpiem.pid ]; then
            kill $(cat magpiem.pid) || true
            rm magpiem.pid
          fi
          pkill -f "python.*dash_ui" || true
        else
          Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object {$_.CommandLine -like "*dash_ui*"} | Stop-Process -Force -ErrorAction SilentlyContinue
          Remove-Item magpiem.pid -ErrorAction SilentlyContinue
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: test/logs/
        retention-days: 30
